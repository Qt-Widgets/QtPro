from PyQt5.QtWidgets import *
import sys
from PyQt5.QtCore import *
from PyQt5.QtGui import *


class SearchBox(QLineEdit):
    def __init__(self):
        super(SearchBox, self).__init__()
        self.setMinimumHeight(30)
        self.setFocusPolicy(Qt.StrongFocus)

        self.search_button=QToolButton(self)
        self.search_button.setFocusPolicy(Qt.NoFocus)
        self.search_button.setIcon(QIcon('E:/Python/PyQt/Pharmacy/Icons/search74-6 - Copy.png'))
        self.search_button.setStyleSheet("QToolButton {border: 0px; padding: 0px;}")

        self.clear_button=QToolButton(self)
        self.clear_button.setShortcut("F8")
        # self.clear_button.clicked.connect(self.clear)
        self.clear_button.setFocusPolicy(Qt.NoFocus)
        self.clear_button.setCursor(Qt.PointingHandCursor)
        self.clear_button.setStyleSheet("QToolButton {border: 0px; padding: 0px;} QToolButton::hover"
                                        " {image:url(E:/Python/PyQt/Pharmacy/Icons/ClearToolButton#8C8C8C.png);}")
        self.clear_button.setIcon(QIcon('E:/Python/PyQt/Pharmacy/Icons/ClearToolButton#8C8C8C.png'))
        self.clear_button.hide()
        self.clear_button.clicked.connect(self.clear)
        self.textChanged.connect(self.__update_clear_button)

        self.setStyleSheet(self.__qss() % (self.__size()[0] + self.__size()[1] + 5, self.__size()[3]))

        # self.setMinimumSize(max(self.minimumSizeHint().width(),self._size()[1]+self._size()[0]*2+2),
        #                     max(self.minimumSizeHint().height(),self._size()[2]+self._size()[0]*2+2))

    def __size(self):
        return self.style().pixelMetric(QStyle.PM_DefaultFrameWidth)\
            ,self.search_button.sizeHint().width()\
            ,self.search_button.sizeHint().height() \
            ,self.clear_button.sizeHint().width() \
            ,self.clear_button.sizeHint().height()

    def __qss(self):
        qss = """
        QLineEdit {
        font : 12pt 'Calibri';
        color : black;
        background-color: white;
        border : 1px solid  #e0e0e0;
        border-left: none ;
        border-right: none ;
        border-top: none ;
        }
        QLineEdit::hover {
        border : 1.5px solid  #e0e0e0;
        border-left: none ;
        border-right: none ;
        border-top: none ;
        }
        QLineEdit:focus {
        selection-background-color: #2FA9E2;
        color : black;
        background-color: white;
        border : 2px solid #2fa9e2;
        border-left: none ;
        border-right: none ;
        border-top: none ;
        }
        QLineEdit {
        padding-left: %dpx;
        padding-right: %spx ;
        }
        """
        return qss

    def resizeEvent(self, event):
        self.search_button.move(6, (self.rect().bottom() - self.__size()[2] + 1)/2)
        self.clear_button.move(self.rect().right() - self.__size()[0] - self.__size()[3], (self.rect().bottom() - self.__size()[4] +1)/2)
        super(SearchBox, self).resizeEvent(event)

    def __update_clear_button(self, text):
        if text=="":
            self.clear_button.setVisible(0)
        else:
            self.clear_button.setVisible(1)
